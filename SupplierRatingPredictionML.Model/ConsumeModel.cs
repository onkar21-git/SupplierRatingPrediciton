// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Microsoft.ML;
using SupplierRatingPredictionML.Model;

namespace SupplierRatingPredictionML.Model
{
    public class ConsumeModel
    {
        // For more info on consuming ML.NET models, visit https://aka.ms/model-builder-consume
        // Method for consuming model in your app
        public static ModelOutput Predict(ModelInput input)
        {

            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\walavonk\AppData\Local\Temp\MLVSTools\SupplierRatingPredictionML\SupplierRatingPredictionML.Model\MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            // Use model to make prediction on input data
            ModelOutput result = predEngine.Predict(input);
            return result;
        }
        /// <summary>
        /// Created By Onkar as wrapper for auto generated Predict method
        /// </summary>
        /// <returns></returns>
        public static List<SupplierData> Predict(string commodity, string volume, string MFProcess)
        {
            List<SupplierData> predictedSuppliers = new List<SupplierData>();
            List<string> supplierList = GetShortlistedSuppliers(commodity);
            foreach (string supplierId in supplierList)
            {

                ModelInput input = new ModelInput();
                input.Supplier = float.Parse(supplierId);
                input.Volume = float.Parse(volume);
                input.Commodity = float.Parse(commodity);
                var predictionResult = Predict(input);
                float predicted = predictionResult.Score;

                SupplierData supplierPredictedData = new SupplierData();
                supplierPredictedData.SupplierName = supplierId;
                supplierPredictedData.predicted_C = Convert.ToInt32(predicted);

                predictedSuppliers.Add(supplierPredictedData);
            }

            return predictedSuppliers;
        }

        private static List<string> GetShortlistedSuppliers(string commodity)
        {
            List<string> supplierList = new List<string>();
            SqlConnection conn = new SqlConnection("Data Source=WL353156\\SQLEXPRESS ;Initial Catalog=OrderSupplierDB;Integrated Security=True");
            conn.Open();
            //Get all suppliers who have commodity
            SqlCommand cmd = new SqlCommand("select distinct(supplier) from tb_OrderRating where Commodity =" + commodity, conn);
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                supplierList.Add(reader["supplier"].ToString());
            }
            conn.Close();

            return supplierList;
        }
    }
}
