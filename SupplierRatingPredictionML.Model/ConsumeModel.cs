// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Microsoft.ML;
using SupplierRatingPredictionML.Model;

namespace SupplierRatingPredictionML.Model
{
    public class ConsumeModel
    {
        // For more info on consuming ML.NET models, visit https://aka.ms/model-builder-consume
        // Method for consuming model in your app
        public static ModelOutput Predict_Q(ModelInput input)
        {

            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\walavonk\Desktop\AI_Project\SourceCodeMain\Data\Q_MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            // Use model to make prediction on input data
            ModelOutput result = predEngine.Predict(input);
            return result;
        }

        public static ModelOutput Predict_C(ModelInput input)
        {

            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\walavonk\Desktop\AI_Project\SourceCodeMain\Data\C_MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            // Use model to make prediction on input data
            ModelOutput result = predEngine.Predict(input);
            return result;
        }

        public static ModelOutput Predict_D(ModelInput input)
        {

            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\walavonk\Desktop\AI_Project\SourceCodeMain\Data\D_MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            // Use model to make prediction on input data
            ModelOutput result = predEngine.Predict(input);
            return result;
        }
        /// <summary>
        /// Created By Onkar as wrapper for auto generated Predict method
        /// </summary>
        /// <returns></returns>
        public static List<SupplierData> Predict(string commodity, string volume, string MFProcess)
        {
            //List<SupplierData> predictedSuppliers = new List<SupplierData>();
            List<SupplierData> supplierList = GetShortlistedSuppliers(commodity);
            
            foreach (SupplierData supplier in supplierList)
            {

                ModelInput input = new ModelInput();
                input.Supplier = float.Parse(supplier.SupplierId.ToString());
                input.Volume = float.Parse(volume);
                input.Commodity = float.Parse(commodity);

                var prediction_Q = Predict_Q(input);
                float predicted_Q = prediction_Q.Score;
                supplier.predicted_Q = Convert.ToInt32(predicted_Q);

                var prediction_C = Predict_C(input);
                float predicted_C = prediction_C.Score;
                supplier.predicted_C = Convert.ToInt32(predicted_C);

                var prediction_D = Predict_D(input);
                float predicted_D = prediction_D.Score;
                supplier.predicted_D = Convert.ToInt32(predicted_D);

                supplier.predicted_Total = supplier.predicted_Q + supplier.predicted_C + supplier.predicted_D;

            }
            supplierList = supplierList.OrderBy(p => p.predicted_Total).ToList();
            return supplierList;
        }

        private static List<SupplierData> GetShortlistedSuppliers(string commodity)
        {
            List<SupplierData> supplierList = new List<SupplierData>();
            SqlConnection conn = new SqlConnection("Data Source=.\\SQLEXPRESS ;AttachDbFilename=C:\\Data\\OrderSupplier.mdf;Integrated Security=True");
            conn.Open();
            //Get all suppliers who have commodity
            SqlCommand cmd = new SqlCommand(@"select distinct(supplier), s.Supplier_Name , s.Supplier_Business_Yrs, 
                                              s.Supplier_Id, s.Supplier_Lead_Time,
                                              s.Supplier_Location, s.Supplier_Size , s.Supplier_Address
                                              from tb_OrderRating o, 
                                              tb_Supplier s where o.Supplier = s.Supplier_Id and Commodity = " + commodity, conn);
            SqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                SupplierData supplier = new SupplierData();
                supplier.SupplierId = Int32.Parse(reader["supplier"].ToString());
                supplier.SupplierName = reader["Supplier_Name"].ToString();
                supplier.Supplier_Address = reader["Supplier_Address"].ToString();
                supplier.Supplier_Business_Yrs = reader["Supplier_Business_Yrs"].ToString();
                supplier.Supplier_Lead_Time = reader["Supplier_Lead_Time"].ToString();
                supplier.Supplier_Location = reader["Supplier_Location"].ToString();
                supplier.Supplier_Size = reader["Supplier_Size"].ToString();

                supplierList.Add(supplier);
            }
            conn.Close();

            return supplierList;
        }
    }
}
